#########################################################
## 工程说明
#########################################################
  #1 hive-udf是自定义udf工程，统一管理和维护用户udf，本工程含两个module
  #2 module hive-udf-trunk,本工程是udf定义工程，也是默认发布基于hadoop-1.0.0环境下运行的udf jar
  #4 module hive-udf-hook,本工程是发布基于hadoop-2.0的udf jar

#########################################################
## UDF开发及发布过程
#########################################################
  #1 用户在module hive-udf-trunk中编写UDF实现类
  #2 编写完成后，在module hive-udf-hook 的 UDFHooks类中调用相关注册函数：
     调用 FunctionRegistry.registerUDF 注册udf
     调用 FunctionRegistry.registerUDAF 注册udaf
     调用FunctionRegistry.registerUDTF  注册udtf

  #3 打包，在主工程（即父工程目录下）执行如下语句
      mvn clean package

  #4 上传相应jar包到$HIVE_HOME/auxlib目录下
     # 如果udf运行在hadoop-1.0.0环境下，那么需要上传module hive-udf-trunk/target 目录下的jar
     # 如果udf运行在hadoop-2.0环境下，那么需要上传module hive-udf-hook/target 目录下的jar

#########################################################
## 如果让hive自动加载udf包（该过程只需要一次执行）
#########################################################
  ## 针对hive-0.8.1 环境
    #1 在$HIVE_HOME/conf目录下创建hive-function.properties文件
    #2 在文件中添加 udf函数名=类全路径
    #3 创建$HIVE_HOME/auxlib路径，并将自定义udf放到该路径下

  ## 针对hive-0.13.1 环境
    #1 如果hive-site.xml文件没有配置如下属性，则需要添加该属性，如果已经存在则省略此过程
  <property>
    <name>hive.exec.driver.run.hooks</name>
    <value>com.sohu.hive.UDFHooks</value>
  </property>
    #2 创建$HIVE_HOME/auxlib路径，并将自定义udf放到该路径下

  ## 测试
    # 调用hive -e "show functions" 命令，查看是否自定义的udf已经成功安装
    # 再MR程序中，测试udf是否正常可以在集群中运行



#########################################################
## 自动加载自定义UDF,UDAF,UDTF 原理及过程
#########################################################

  #1 正常情况书写udf类,完成功能实现

  #2 编写Hook类（UDFHooks），实现HiveDriverRunHook接口，并在Hook类中调用注册方法，注册第一步
     编写的udf

  #3 打包，并将jar包上传到$HIVE_HOME/auxlib/目录下

  #4 修改hive-site.xml文件，增加属性，即可立即使用自定义的udf
  <property>
    <name>hive.exec.driver.run.hooks</name>
    <value>com.sohu.hive.UDFHooks</value>
  </property>

  #5 以后需要维护udf，只需要将新的jar包替换掉即可

  #6 后期如果想要不手动再UDFHooks中注册udf，可以在实现udf的时候，使用@Description注解，并在UDF
  Hooks中获取类的注解信息，同时完成注册功能（有待以后开发）